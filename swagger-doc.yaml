swagger: '2.0'
info:
  description: Sagger documentaion for my rest blog.
  version: API TOS
  title: Rest blog api
  termsOfService: Terms of service
  contact:
    name: Aurel Marishta
    email: aurel.marishta@atis.al
  license:
    name: License of API
host: 'localhost:8080'

basePath: /
schemes:
- http

securityDefinitions:
  JWT:
    description: ""
    type: "apiKey"
    name: "Authorization"
    in: "header"

tags:
  - name: Admin
    description: Admin Controller
  - name: Articles
    description: Article Controller
  - name: Auth
    description: Auth Controller
  - name: Categories
    description: Category Controller
  - name: Comments
    description: Comment Controller
  - name: Images
    description: Image
  - name: Site Confs
    description: Site-confs
  - name: Tags
    description: tags-controller
  - name: Users
    description: User Controller
paths:
  /api/admin/articles/unathorised:
    get:
      security:
          - JWT: []
      tags:
        - Admin
      summary: getAllUnAuthorisedArticles
      operationId: getAllUnAuthorisedArticlesUsingGET
      produces:
        - '*/*'
        
      responses:
        '200':
          description: OK
          schema:
            type: object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/admin/articles/updatePositions:
    put:
      security:
          - JWT: []
          
      tags:
        - Admin
      summary: updateArticlesPositions
      operationId: updateArticlesPositionsUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: articlesPositionsDto
          description: articlesPositionsDto
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/ArticlePositionDto'
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/admin/articles/{id}/authorise':
    put:
      security:
        - JWT: []
      tags:
        - Admin
      summary: changeAuthorisationForArticle
      operationId: changeAuthorisationForArticleUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: authorised
          in: query
          description: authorised
          required: true
          type: boolean
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/admin/comments:
    get:
      security:
        - JWT: []
      tags:
        - Admin
      summary: getAllUnAuthorisedComments
      operationId: getAllUnAuthorisedCommentsUsingGET
      produces:
        - '*/*'
      parameters:
        - name: page
          in: query
          description: page
          required: false
          type: integer
          default: 0
          format: int32
        - name: size
          in: query
          description: size
          required: false
          type: integer
          default: 30
          format: int32
      responses:
        '200':
          description: OK
          schema:
            type: object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/admin/comments/{id}/changeStatus':
    put:
      security:
        - JWT: []
      tags:
        - Admin
      summary: changeCommentStatus
      operationId: changeCommentStatusUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: authorised
          in: query
          description: authorised
          required: true
          type: boolean
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/articles:
    get:
      tags:
        - Articles
      summary: View all available articles
      operationId: getAllArticlesUsingGET
      produces:
        - '*/*'
      parameters:
        - name: page
          in: query
          description: page
          required: false
          type: integer
          default: 0
          format: int32
        - name: size
          in: query
          description: size
          required: false
          type: integer
          default: 30
          format: int32
      responses:
        '200':
          description: Successfully retrieved list
        '401':
          description: You are not authorized to view the resource
        '403':
          description: Accessing the resource you were trying to reach is forbidden
        '404':
          description: The resource you were trying to reach is not found
      deprecated: false
    post:
      security:
        - JWT: []
      tags:
        - Articles
      summary: Create a new article
      operationId: addArticleUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: accountNonExpired
          in: query
          required: false
          type: boolean
        - name: accountNonLocked
          in: query
          required: false
          type: boolean
        - in: body
          name: article
          description: article
          required: true
          schema:
            $ref: '#/definitions/Article'
        - name: 'authorities[0].authority'
          in: query
          required: false
          type: string
        - name: credentialsNonExpired
          in: query
          required: false
          type: boolean
        - name: email
          in: query
          required: false
          type: string
        - name: enabled
          in: query
          required: false
          type: boolean
        - name: firstName
          in: query
          required: false
          type: string
        - name: id
          in: query
          required: false
          type: integer
          format: int64
        - name: lastName
          in: query
          required: false
          type: string
        - name: password
          in: query
          required: false
          type: string
        - name: username
          in: query
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Successfully created
          schema:
            type: object
        '401':
          description: Unauthorized
        '403':
          description: Authorisation required
        '404':
          description: Not Found
      deprecated: false
  '/api/articles/{id}':
    get:
      tags:
        - Articles
      summary: View article
      operationId: getArticleUsingGET
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Successfully retrieved article
          schema:
            type: object
        '401':
          description: You are not authorized to view the resource
        '403':
          description: Accessing the resource you were trying to reach is forbidden
        '404':
          description: The resource you were trying to reach is not found
      deprecated: false
    put:
      security:
        - JWT: []
      tags:
        - Articles
      summary: Update article
      operationId: updateArticleUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: accountNonExpired
          in: query
          required: false
          type: boolean
        - name: accountNonLocked
          in: query
          required: false
          type: boolean
        - name: 'authorities[0].authority'
          in: query
          required: false
          type: string
        - name: credentialsNonExpired
          in: query
          required: false
          type: boolean
        - name: email
          in: query
          required: false
          type: string
        - name: enabled
          in: query
          required: false
          type: boolean
        - name: firstName
          in: query
          required: false
          type: string
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
        - name: id
          in: query
          required: false
          type: integer
          format: int64
        - name: lastName
          in: query
          required: false
          type: string
        - in: body
          name: newArticle
          description: newArticle
          required: true
          schema:
            $ref: '#/definitions/ArticleDto'
        - name: password
          in: query
          required: false
          type: string
        - name: username
          in: query
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '202':
          description: Successfully updated
          schema:
            type: object
        '401':
          description: You are not authorized to update the resource
        '403':
          description: Authorisation required
        '404':
          description: The resource you were trying to reach is not found
      deprecated: false
    delete:
      security:
        - JWT: []
      tags:
        - Articles
      summary: Delete article
      operationId: deleteArticleUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: accountNonExpired
          in: query
          required: false
          type: boolean
        - name: accountNonLocked
          in: query
          required: false
          type: boolean
        - name: 'authorities[0].authority'
          in: query
          required: false
          type: string
        - name: credentialsNonExpired
          in: query
          required: false
          type: boolean
        - name: email
          in: query
          required: false
          type: string
        - name: enabled
          in: query
          required: false
          type: boolean
        - name: firstName
          in: query
          required: false
          type: string
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
        - name: id
          in: query
          required: false
          type: integer
          format: int64
        - name: lastName
          in: query
          required: false
          type: string
        - name: password
          in: query
          required: false
          type: string
        - name: username
          in: query
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
        '204':
          description: Successfully deleted
          schema:
            type: object
        '401':
          description: You are not authorized to delete the resource
        '403':
          description: Authorisation required
        '404':
          description: The resource you were trying to reach is not found
      deprecated: false
  /api/auth/confirm-email:
    get:
      tags:
        - Auth
      summary: confirmUserAccount
      operationId: confirmUserAccountUsingGET
      produces:
        - '*/*'
      parameters:
        - name: token
          in: query
          description: token
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    post:
      tags:
        - Auth
      summary: confirmUserAccount
      operationId: confirmUserAccountUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: token
          in: query
          description: token
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/auth/resetPassword:
    get:
      tags:
        - Auth
      summary: sendRestPaswordToken
      operationId: sendRestPaswordTokenUsingGET
      produces:
        - '*/*'
      parameters:
        - name: email
          in: query
          description: email
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    put:
      tags:
        - Auth
      summary: resetPassword
      operationId: resetPasswordUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: resetPasswordRequest
          description: resetPasswordRequest
          required: true
          schema:
            $ref: '#/definitions/ResetPasswordRequest'
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/auth/signin:
    post:
      tags:
        - Auth
      summary: authenticateUser
      operationId: authenticateUserUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: loginRequest
          description: loginRequest
          required: true
          schema:
            $ref: '#/definitions/LoginRequest'
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/auth/signup:
    post:
      tags:
        - Auth
      summary: registerUser
      operationId: registerUserUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: signUpRequest
          description: signUpRequest
          required: true
          schema:
            $ref: '#/definitions/SignUpRequest'
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/categories:
    get:
      tags:
        - Categories
      summary: getAllArticles
      operationId: getAllArticlesUsingGET_1
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    post:
      security:
        - JWT: []
      tags:
        - Categories
      summary: addArticle
      operationId: addArticleUsingPOST_1
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: categoryDto
          description: categoryDto
          required: true
          schema:
            $ref: '#/definitions/CategoryDto'
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/categories/{id}':
    put:
      security:
        - JWT: []
      tags:
        - Categories
      summary: updateCategory
      operationId: updateCategoryUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
        - in: body
          name: updatedCategory
          description: updatedCategory
          required: true
          schema:
            $ref: '#/definitions/CategoryDto'
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/categories/{id}/articles':
    get:
      tags:
        - Categories
      summary: getCategoryArticles
      operationId: getCategoryArticlesUsingGET
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
        - name: page
          in: query
          description: page
          required: false
          type: integer
          default: 0
          format: int32
        - name: size
          in: query
          description: size
          required: false
          type: integer
          default: 30
          format: int32
      responses:
        '200':
          description: OK
          schema:
            type: object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/comments:
    post:
      security:
        - JWT: []
      tags:
        - Comments
      summary: createComment
      operationId: createCommentUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: commentDto
          description: commentDto
          required: true
          schema:
            $ref: '#/definitions/CommentDto'
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/comments/{id}':
    put:
      security:
        - JWT: []
      tags:
        - Comments
      summary: updateComment
      operationId: updateCommentUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: commentDto
          description: commentDto
          required: true
          schema:
            $ref: '#/definitions/CommentDto'
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    delete:
      security:
        - JWT: []
      tags:
        - Comments
      summary: deleteComment
      operationId: deleteCommentUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: object
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      deprecated: false
  /api/images:
    get:
      tags:
        - Images
      summary: getImages
      operationId: getImagesUsingGET
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    post:
      security:
        - JWT: []
      tags:
        - Images
      summary: postImage
      operationId: postImageUsingPOST
      consumes:
        - multipart/form-data
      produces:
        - '*/*'
      parameters:
        - name: alt
          in: query
          description: alt
          required: false
          type: string
        - name: description
          in: query
          description: description
          required: false
          type: string
        - name: file
          in: formData
          description: file
          required: true
          type: file
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/images/{id}':
    get:
      tags:
        - Images
      summary: getImage
      operationId: getImageUsingGET
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    put:
      security:
        - JWT: []
      tags:
        - Images
      summary: updateImage
      operationId: updateImageUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
        - in: body
          name: imageUpdate
          description: imageUpdate
          required: true
          schema:
            $ref: '#/definitions/ImageUpdate'
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    delete:
      security:
        - JWT: []
      tags:
        - Images
      summary: deleteImage
      operationId: deleteImageUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: object
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      deprecated: false
  /api/siteConf:
    get:
      security:
        - JWT: []
      tags:
        - Site Confs
      summary: getAllSiteConf
      operationId: getAllSiteConfUsingGET
      produces:
        - '*/*'
      parameters:
        - name: page
          in: query
          description: page
          required: false
          type: integer
          default: 0
          format: int32
        - name: size
          in: query
          description: size
          required: false
          type: integer
          default: 30
          format: int32
      responses:
        '200':
          description: OK
          schema:
            type: object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/siteConf/{key}':
    get:
      security:
        - JWT: []
      tags:
        - Site Confs
      summary: getSeteConf
      operationId: getSeteConfUsingGET
      produces:
        - '*/*'
      parameters:
        - name: key
          in: path
          description: key
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    put:
      security:
        - JWT: []
      tags:
        - Site Confs
      summary: updateSiteConf
      operationId: updateSiteConfUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: key
          in: path
          description: key
          required: true
          type: string
        - in: body
          name: newSiteConf
          description: newSiteConf
          required: true
          schema:
            $ref: '#/definitions/SiteConf'
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    delete:
      security:
        - JWT: []
      tags:
        - Site Confs
      summary: deleteSiteConf
      operationId: deleteSiteConfUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: key
          in: path
          description: key
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      deprecated: false
  /api/tags:
    get:
      tags:
        - Tags
      summary: getAllTags
      operationId: getAllTagsUsingGET
      produces:
        - '*/*'
      parameters:
        - name: page
          in: query
          description: page
          required: false
          type: integer
          default: 0
          format: int32
        - name: size
          in: query
          description: size
          required: false
          type: integer
          default: 30
          format: int32
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    post:
      security:
        - JWT: []
      tags:
        - Tags
      summary: addPost
      operationId: addPostUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: tag
          description: tag
          required: true
          schema:
            $ref: '#/definitions/Tag'
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/tags/{id}':
    get:
      tags:
        - Tags
      summary: getArticle
      operationId: getArticleUsingGET_1
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    delete:
      security:
        - JWT: []
      tags:
        - Tags
      summary: deleteTag
      operationId: deleteTagUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: accountNonExpired
          in: query
          required: false
          type: boolean
        - name: accountNonLocked
          in: query
          required: false
          type: boolean
        - name: 'authorities[0].authority'
          in: query
          required: false
          type: string
        - name: credentialsNonExpired
          in: query
          required: false
          type: boolean
        - name: email
          in: query
          required: false
          type: string
        - name: enabled
          in: query
          required: false
          type: boolean
        - name: firstName
          in: query
          required: false
          type: string
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
        - name: id
          in: query
          required: false
          type: integer
          format: int64
        - name: lastName
          in: query
          required: false
          type: string
        - name: password
          in: query
          required: false
          type: string
        - name: username
          in: query
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      deprecated: false
  '/api/tags/{tag}/articles':
    get:
      tags:
        - Tags
      summary: getAllArticlesWithTag
      operationId: getAllArticlesWithTagUsingGET
      produces:
        - '*/*'
      parameters:
        - name: tag
          in: path
          description: tag
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/users/checkEmailAvailability:
    get:
      tags:
        - Users
      summary: checkEmailAvailability
      operationId: checkEmailAvailabilityUsingGET
      produces:
        - '*/*'
      parameters:
        - name: email
          in: query
          description: email
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserIdentityAvailability'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/users/checkUsernameAvailability:
    get:
      tags:
        - Users
      summary: checkUsernameAvailability
      operationId: checkUsernameAvailabilityUsingGET
      produces:
        - '*/*'
      parameters:
        - name: username
          in: query
          description: username
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserIdentityAvailability'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/users/me:
    get:
      security:
        - JWT: []
      tags:
        - Users
      summary: getCurrentUser
      operationId: getCurrentUserUsingGET
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserSummary'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/users/setOrUpdateInfo:
    put:
      security:
        - JWT: []
      tags:
        - Users
      summary: setAddress
      operationId: setAddressUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: infoRequest
          description: infoRequest
          required: true
          schema:
            $ref: '#/definitions/InfoRequest'
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/users/{username}':
    put:
      security:
        - JWT: []
      tags:
        - Users
      summary: updateUser
      operationId: updateUserUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: newUser
          description: newUser
          required: true
          schema:
            $ref: '#/definitions/User'
        - name: username
          in: path
          description: username
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    delete:
      security:
        - JWT: []
      tags:
        - Users
      summary: deleteUser
      operationId: deleteUserUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: username
          in: path
          description: username
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      deprecated: false
  '/api/users/{username}/articles':
    get:
      tags:
        - Users
      summary: getArticlesCreatedBy
      operationId: getArticlesCreatedByUsingGET
      produces:
        - '*/*'
      parameters:
        - name: page
          in: query
          description: page
          required: false
          type: integer
          default: 0
          format: int32
        - name: size
          in: query
          description: size
          required: false
          type: integer
          default: 30
          format: int32
        - name: username
          in: path
          description: username
          required: true
          type: string
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/users/{username}/giveAdmin':
    put:
      security:
        - JWT: []
      tags:
        - Users
      summary: giveAdmin
      operationId: giveAdminUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: username
          in: path
          description: username
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/users/{username}/profile':
    get:
      tags:
        - Users
      summary: getUSerProfile
      operationId: getUSerProfileUsingGET
      produces:
        - '*/*'
      parameters:
        - name: username
          in: path
          description: username
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserProfile'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/users/{username}/takeAdmin':
    put:
      security:
        - JWT: []
      tags:
        - Users
      summary: takeAdmin
      operationId: takeAdminUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: username
          in: path
          description: username
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
definitions:
  Address:
    type: object
    properties:
      city:
        type: string
      geo:
        $ref: '#/definitions/Geo'
      street:
        type: string
      suite:
        type: string
      zipcode:
        type: string
    title: Address
  Article:
    type: object
    properties:
      body:
        type: string
      createdAt:
        type: string
        format: date-time
      createdBy:
        type: integer
        format: int64
      featuredImage:
        $ref: '#/definitions/Image'
      id:
        type: integer
        format: int64
      metas:
        type: array
        items:
          $ref: '#/definitions/ArticleMeta'
      open_new_window:
        type: boolean
      position:
        type: integer
        format: int64
      reactions:
        type: array
        items:
          $ref: '#/definitions/Reaction'
      scheduledAt:
        type: string
        format: date-time
      slug:
        type: string
      summary:
        type: string
      title:
        type: string
      updatedAt:
        type: string
        format: date-time
      updatedBy:
        type: integer
        format: int64
    title: Article
  ArticleDto:
    type: object
    properties:
      _featured:
        type: boolean
      authorised:
        type: boolean
      body:
        type: string
      createdAt:
        type: string
        format: date-time
      enabled:
        type: boolean
      featuredImage:
        $ref: '#/definitions/Image'
      images:
        type: array
        items:
          type: integer
          format: int64
      open_new_window:
        type: boolean
      position:
        type: integer
        format: int64
      scheduledAt:
        type: string
      slug:
        type: string
      summary:
        type: string
      tags:
        type: array
        items:
          type: integer
          format: int64
      title:
        type: string
      updatedAt:
        type: string
        format: date-time
      user:
        type: integer
        format: int64
    title: ArticleDto
  ArticleMeta:
    type: object
    properties:
      id:
        type: integer
        format: int32
      metaKey:
        type: string
      metaValue:
        type: string
    title: ArticleMeta
  ArticlePositionDto:
    type: object
    properties:
      id:
        type: integer
        format: int64
      position:
        type: integer
        format: int64
    title: ArticlePositionDto
  CategoryDto:
    type: object
    properties:
      articles:
        type: array
        items:
          type: integer
          format: int64
      name:
        type: string
      parent:
        type: integer
        format: int64
      subCategories:
        type: array
        items:
          type: integer
          format: int64
    title: CategoryDto
  CommentDto:
    type: object
    properties:
      articleId:
        type: integer
        format: int64
      body:
        type: string
      id:
        type: integer
        format: int64
      username:
        type: string
    title: CommentDto
  Company:
    type: object
    properties:
      bs:
        type: string
      catchPhrase:
        type: string
      name:
        type: string
    title: Company
  Geo:
    type: object
    properties:
      lat:
        type: string
      lng:
        type: string
    title: Geo
  Image:
    type: object
    properties:
      alt:
        type: string
      createdAt:
        type: string
        format: date-time
      createdBy:
        type: integer
        format: int64
      description:
        type: string
      id:
        type: integer
        format: int64
      name:
        type: string
      size:
        type: integer
        format: int64
      type:
        type: string
      updatedAt:
        type: string
        format: date-time
      updatedBy:
        type: integer
        format: int64
      url:
        type: string
    title: Image
  ImageUpdate:
    type: object
    properties:
      alt:
        type: string
      description:
        type: string
    title: ImageUpdate
  InfoRequest:
    type: object
    properties:
      bs:
        type: string
      catchPhrase:
        type: string
      city:
        type: string
      companyName:
        type: string
      lat:
        type: string
      lng:
        type: string
      phone:
        type: string
      street:
        type: string
      suite:
        type: string
      website:
        type: string
      zipcode:
        type: string
    title: InfoRequest
  LoginRequest:
    type: object
    properties:
      password:
        type: string
      usernameOrEmail:
        type: string
    title: LoginRequest
  PagedResponse«Article»:
    type: object
    properties:
      content:
        type: array
        items:
          $ref: '#/definitions/Article'
      last:
        type: boolean
      page:
        type: integer
        format: int32
      size:
        type: integer
        format: int32
      totalElements:
        type: integer
        format: int64
      totalPages:
        type: integer
        format: int32
    title: PagedResponse«Article»
  PagedResponse«Tag»:
    type: object
    properties:
      content:
        type: array
        items:
          $ref: '#/definitions/Tag'
      last:
        type: boolean
      page:
        type: integer
        format: int32
      size:
        type: integer
        format: int32
      totalElements:
        type: integer
        format: int64
      totalPages:
        type: integer
        format: int32
    title: PagedResponse«Tag»
  Reaction:
    type: object
    properties:
      createdAt:
        type: string
        format: date-time
      createdBy:
        type: integer
        format: int64
      id:
        type: integer
        format: int64
      reaction:
        type: string
      updatedAt:
        type: string
        format: date-time
      updatedBy:
        type: integer
        format: int64
      user:
        type: object
    title: Reaction
  ResetPasswordRequest:
    type: object
    properties:
      confPass:
        type: string
      pass:
        type: string
      token:
        type: string
    title: ResetPasswordRequest
  Role:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        enum:
          - ROLE_ADMIN
          - ROLE_USER
    title: Role
  SignUpRequest:
    type: object
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
      username:
        type: string
    title: SignUpRequest
  SiteConf:
    type: object
    properties:
      key:
        type: string
      value:
        type: string
    title: SiteConf
  Tag:
    type: object
    properties:
      createdAt:
        type: string
        format: date-time
      id:
        type: integer
        format: int64
      tag:
        type: string
      updatedAt:
        type: string
        format: date-time
    title: Tag
  User:
    type: object
    properties:
      accountNonExpired:
        type: boolean
      accountNonLocked:
        type: boolean
      address:
        $ref: '#/definitions/Address'
      company:
        $ref: '#/definitions/Company'
      createdAt:
        type: string
        format: date-time
      credentialsNonExpired:
        type: boolean
      email:
        type: string
      enabled:
        type: boolean
      firstName:
        type: string
      id:
        type: integer
        format: int64
      lastName:
        type: string
      password:
        type: string
      phone:
        type: string
      roles:
        type: array
        items:
          $ref: '#/definitions/Role'
      updatedAt:
        type: string
        format: date-time
      username:
        type: string
      website:
        type: string
    title: User
  UserIdentityAvailability:
    type: object
    properties:
      available:
        type: boolean
    title: UserIdentityAvailability
  UserProfile:
    type: object
    properties:
      address:
        $ref: '#/definitions/Address'
      company:
        $ref: '#/definitions/Company'
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
        format: int64
      joinedAt:
        type: string
        format: date-time
      lastName:
        type: string
      phone:
        type: string
      postCount:
        type: integer
        format: int64
      username:
        type: string
      website:
        type: string
    title: UserProfile
  UserSummary:
    type: object
    properties:
      firstName:
        type: string
      id:
        type: integer
        format: int64
      lastName:
        type: string
      username:
        type: string
    title: UserSummary
